input_description -distribution {Quantum Espresso} -package Environ -program pw.x {

    toc {}

    intro {
        @b {Input data format:} { } = optional, [ ] = it depends, | = or

        All quantities whose dimensions are not explicitly specified are in
        RYDBERG ATOMIC UNITS. Charge is "number" charge (i.e. not multiplied
        by e); potentials are in energy units (i.e. they are multiplied by e).

        @b BEWARE: TABS, DOS <CR><LF> CHARACTERS ARE POTENTIAL SOURCES OF TROUBLE

        Comment lines in @i namelists can be introduced by a "!", exactly as in fortran
        code. Comments lines in @i cards can be introduced by either a "!" or a "#"
        character in the first position of a line.
        
        Do not start any line in @i cards with a "/" character.

        @b {Structure of the environ.in input file:}
        ===============================================================================

        @b &ENVIRON
            ...
        @b /

        [ @b &BOUNDARY
            ...
        @b / ]

        [ @b &ELECTROSTATIC
            ...
        @b / ]

        [ @b EXTERNAL_CHARGES { bohr | angstrom }
            Q1 0.0 0.0 0.0 { spread_Q1 dim_Q1 axis_Q1 }
            Q2 0.5 0.0 0.0 { spread_Q2 dim_Q2 axis_Q2 } ]

        [ @b DIELECTRIC_REGIONS { bohr | angstrom }
            EPSst_E1 EPSopt_E1 0.0 0.0 0.0 width_E1 { spread_E1 dim_E1 axis_E1 }
            EPSst_E2 EPSopt_E2 0.0 0.0 0.0 width_E2 { spread_E2 dim_E2 axis_E2 } ]
    }

    namelist ENVIRON {

        label { This namelist is always needed ! }

        dimension atomicspread -start 1 -end ntyp -type REAL {
            default { -0.5D0 }
            info {
            In the calculation of electrostatic contributions, ionic charge densities are modelled
            as gaussians of fixed spread, as specified by atomicspread(ityp) for each atomic type.
            Results are identical to using point-like charges (as is usually done in PW), unless the gaussian
            spreads are too large. The default value of 0.5 a.u. was derived to be safe enough in most
            common atom types. Too small of a value may require larger density cutoffs (ecutrho).
            }
            status { OPTIONAL }
        }

        dimension cion -start 1 -end env_electrolyte_ntyp -type REAL {
            default { 1.D0 }
            info {
            Molar concentration of ionic countercharge (in mol/L).
            }
            status { OPTIONAL }
        }

        var cionmax -type REAL {
            default { 1.D3 }
            info {
            Maximum molar concentration of ionic countercharge (in mol/L).
            }
            status { OPTIONAL }
        }

        var electrolyte_entropy -type CHARACTER {
            default { 'full' }
            info {
            Keyword to set the electrolyte entropy terms that are affected by the Stern-layer correction.

            'ions' : only ionic terms (Ringe et al. J. Chem. Theory Comput. 12, 4052).
            'full' : all terms (Dabo et al. arXiv 0901.0096).
            }
            status { OPTIONAL }
        }

        var electrolyte_linearized -type LOGICAL {
            default { .FALSE. }
            info {
            Controls if the linear-regime approximation is employed for the electrolyte model.
            It can be used in combination with the numerical Poisson-Boltzmann (PB) model as well as with the  
            Gouy-Chapman-Stern correction that exploits the 1D-solution of the PB equation (see pbc_correction).
            }
            status { OPTIONAL }
        }

        var env_confine -type REAL {
            default { 0.D0 }
            info {
            Confinement potential barrier in Rydberg atomic units.
            
            This keyword controls the activation of the confinement potential contribution
            to the solute's Hamiltonian. A value of 0.D0 means no confinement contribution
            from the environment.

            The confinement potential may be used to favour electron localization: a potential that 
            smoothly switches between zero and env_confine, following the complementary of 
            the interface function, provides a destabilizing contribution that penalizes 
            delocalized states.
            }
            status { REQUIRED }
        }

        var env_dielectric_regions -type INTEGER {
            default { 0 }
            info {
            Number of fixed dielectric regions. This keyword controls how many regions of fixed 
            permittivities (static and optical) need to be included in the simulation box. Shape, 
            position, and permittivities of each region need to be specified in the DIELECTRIC_REGIONS card.
            }
            status { REQUIRED }
        }
        
        var env_ecut -type REAL {
            default { 0.D0 }
            info {
                Cutoff value (Ry) used to derive the G-vector cutoff on Environ's internal FFT-grid.
            }
            status { OPTIONAL }
        }

        var env_electrolyte_ntyp -type INTEGER {
            default { 0 }
            info {
            Number of countercharge species to be added in the continuum region modelling 
            the electrolyte. If different from zero, must be greater or equal to 2 in order 
            for the electrolyte to be charge neutral.
            }
            status { REQUIRED }
        }

        var env_electrostatic -type LOGICAL {
            default { .FALSE. }
            info {
            Generic keyword that flags the need to read the &ELECTROSTATIC namelist. Any electrostatic
            embedding keyword (env_static_permittivity, env_electrolyte_ntyp) will turn this keyword on.
            One needs to turn on this keyword explicitly to activate electrostatic embedding effects
            that do not have a specific activation keyword, such as for PBC correction schemes.
            }
            status { OPTIONAL }
        }

        var no_electrostatics -type LOGICAL {
            default { .FALSE. }
            info {
            Suppress electrostatic calculation. This prevents initialization of unnecessary
            quantities such as certain potentials.
            }
            status { OPTIONAL }
        }
        
        var env_external_charges -type INTEGER {
            default { 0 }
            info {
            Number of fixed external charges. This keyword controls how many fixed external densities 
            of charge need to be included in the simulation box. Shape, position, and amount of charge 
            of each external density need to be specified in the EXTERNAL_CHARGES card.
            }
            status { REQUIRED }
        }

        dimension env_nrep -start 1 -end 3 -type INTEGER {
            default { 0 }
            info {
            Number of additional replicas of the system cell on each side along the three axis.
            nrep = 1 means there is one more cell on the left and on the right of the cell.
            The environment cell is (2*nrep+1) times the system cell along the three axis.
            }
            status { OPTIONAL }
        }

        var env_optical_permittivity -type REAL {
            default { 1.D0 }
            info {
            Optical dielectric permittivity of the electrostatic continuum embedding model,
            only needed for TDDFPT calculations. A value of 1 (=vacuum) means no dielectric
            effects in linear response calculations.
            }
            status { REQUIRED }
        }

        var env_pressure -type REAL {
            default { see below }
            info {
            External pressure (P) of the environment in GPa.

            This keyword controls the activation of the volume-dependent contribution to
            the solute's Hamiltonian (P*V). A value of 0.D0 means no volume contribution
            from the environment.

            This contribution may be straightforwardly used to compute the electronic enthalpy,
            i.e. to model finite systems under pressure, as proposed by M. Cococcioni et al. in
            Phys. Rev. Lett. 94, 145501 (2005). This contribution can also be used as a simplified
            approach to more complex and general non-electrostatic contributions to solvation,
            as in the SCCS approach. In this second case, env_pressure needs not correspond to the
            real external pressure of the environment, but is used as a fitting parameter
            (and can assume negative values). 
            
            See O. Andreussi, I. Dabo and N. Marzari, J. Chem. Phys. 136 064102 (2012)
            
            DEFAULT:

            solvent_mode .EQ. electronic | full :
                environ_type .EQ. input | vacuum : 0.D0
                environ_type .EQ. water          : -0.35D0
                environ_type .EQ. water-cation   : 0.125D0
                environ_type .EQ. water-anion    : 0.450D0

            solvent_mode .EQ. ionic : -0.35D0
            }
            status { REQUIRED }
        }

        var env_static_permittivity -type REAL {
            default { see below }
            info {
            Static dielectric permittivity of the electrostatic continuum embedding model.
            
            This keyword (like all the env_* keywords) is also the flag which controls the 
            activation of the specific contribution. A value of 1 (=vacuum) means no dielectric 
            effects from the environment.

            DEFAULT:

            environ_type .EQ. water | water-cation | water-anion : 78.3D0
            environ_type .EQ. input | vacuum                     : 1.D0

            }
            status { REQUIRED }
        }

        var env_surface_tension -type REAL {
            default { see below }
            info {
            Surface tension (gamma) of the environment in CGS units dyn/cm.
            
            This keyword controls the activation of the surface-dependent contribution to
            the solute's Hamiltonian (gamma*S). A value of 0.D0 means no surface
            contribution from the environment.

            This contribution may be straightforwardly used to compute cavitation free energies,
            as proposed by Scherlis et al. in J. Chem. Phys. 124, 074103 (2006).
            NOTE that the current implementation uses an improved definition of the quantum-surface.
            This contribution can also be used as a simplified approach to the more general
            non-electrostatic contributions to solvation, as in the SCCS approach.
            In this second case, env_surface_tension does not need to correspond to the
            real surface tension of the solvent, but is used as a fitting parameter.
            
            See O. Andreussi, I. Dabo and N. Marzari, J. Chem. Phys. 136 064102 (2012)

            DEFAULT:

            solvent_mode .EQ. electronic | full :
                environ_type .EQ. input | vacuum | water-anion : 0.D0
                environ_type .EQ. water                        : 50.D0
                environ_type .EQ. water-cation                 : 5.D0

            solvent_mode .EQ. ionic : 50.D0
            }
            status { REQUIRED }
        }

        var environ_nskip -type INTEGER {
            default { 1 }
            info {
            Only include/update environment contributions after the first environ_nskip steps of CP dynamics.
            }
        }

        var environ_restart -type LOGICAL {
            default { .FALSE. }
            info {
            Compute environ contributions during the initialization step, useful for 'restart' calculations
            and systems with a good-enough initial guess.
            
            Must be set to activate environ in nscf calculations.
            }
            status { OPTIONAL }
        }

        var environ_thr -type REAL {
            default { 1.D-1 }
            info {
            Only include/update environment contributions when SCF accuracy is below this threshold.
            Since the environment region is defined in terms of the electronic density, the test is done
            in order to avoid computing unphysical environment contributions, usually to skip the
            environ calculation during the first couple of SCF step.

            IMPORTANT: as the SCF accuracy is an extensive property (increases with the number of electrons in
            the system), the optimal environ_thr will also vary with system size.
            }
            status { IMPORTANT - the default value is only valid for small systems - too conservative for larger systems }
        }

        var environ_type  -type CHARACTER {
            default { 'input' }
            info {
            Set up all of the environment embedding flags and interface
            parameters according to predefined types:

            'input':
                Do not use predefined types, read the flags of the different contribution from input
                or use the defaults values (which correspond to no contributions).

            'vacuum':
                All environment embeddings are turned off, but pbc corrections, external charges and
                electrolyte charges can be present.

            'water':
                Set up the main physical constants to the experimental values for water at room temperature
                (env_static_permittivity = 78.3). Set the tunable embedding flags to the values optimized
                to reproduce aqueous solvation of small neutral organic compounds, corresponding to
                non-electrostatic contributions modelled via pressure (env_pressure = -0.35 GPa)
                and surface tension (env_surface_tension = 50 dyn/cm) effects (see references below).
                For electrons-dependent interfaces (self-consistent continuum solvation, SCCS), set soft
                interface parameters to the optimal values (rhomax = 0.005; rhomin = 0.0001)
                derived in O. Andreussi, I. Dabo and N. Marzari, J. Chem. Phys. 136 064102 (2012).
                For ions-dependent interfaces (soft-sphere continuum solvation, SSCS), set rigid
                interface parameter to the optimal value (alpha = 1.12) derived in
                G. Fisicaro et al. J. Chem. Theory Comput. 13, 8, 3829 (2017).

            'water-cation':
                Set up the main physical constants to the experimental values for water at room temperature
                (env_static_permittivity = 78.3). Set the tunable embedding flags to the values optimized
                to reproduce aqueous solvation of small organic cations.
                SCCS parameters (env_pressure = 0.125 GPa; env_surface_tension = 5.0 dyn/cm;
                rhomax = 0.0035;  rhomin = 0.0002) were derived in C. Dupont, O. Andreussi and
                N. Marzari, J. Chem. Phys. 139, 214110 (2013)
                SSCS parameters (env_pressure = -0.35 GPa; env_surface_tension = 50.0 dyn/cm;
                alpha = 1.10) were derived in G. Fisicaro et al. J. Chem. Theory Comput.
                13, 8, 3829 (2017).

            'water-anion':
                Set up the main physical constants to the experimental values for water at room temperature
                (env_static_permittivity = 78.3). Set the tunable embedding flags to the values optimized
                to reproduce aqueous solvation of small organic cations.
                SCCS parameters (env_pressure = 0.45 GPa; env_surface_tension = 0.0 dyn/cm;
                rhomax = 0.0155;  rhomin = 0.0024) were derived in C. Dupont, O. Andreussi and
                N. Marzari, J. Chem. Phys. 139, 214110 (2013)
                SSCS parameters (env_pressure = -0.35 GPa; env_surface_tension = 50.0 dyn/cm;
                alpha = 0.98) were derived in G. Fisicaro et al. J. Chem. Theory Comput.
                13, 8, 3829 (2017).
            }
            status { OPTIONAL }
        }

        var rion -type REAL {
            default { 0.D0 }
            info {
            Mean atomic radius of ionic countercharge (a.u.).
            }
            status { OPTIONAL }
        }

        var sc_carrier_density -type REAL {
            default { 0.D0 }
            info {
            Concentration of charge carriers within the semiconductor (cm^-3).
            }
            status { OPTIONAL }
        }

        var sc_permittivity -type REAL {
            default { 1.D0 }
            info {
            Dielectric permittivity of the semiconductor.
            }
            status { OPTIONAL }
        }

        var sc_electrode_chg -type REAL {
            default { 0.D0 }
            info {
            The total charge on the electrode (e).
            }
            status { OPTIONAL }
        }

        var sc_chg_thr -type REAL {
            default { 1.D-4 }
            info {
            Threshold for the outer loop of charge optimization.
            }
            status { OPTIONAL }
        }

        var system_axis -type INTEGER {
            default { 3 }
            info {
            Main axis of the embedded system, only necessary for partially periodic systems
            (1 = x, 2 = y, 3 = z).
            }
        }

        var system_dim -type INTEGER {
            default { 0 }
            info {
            Dimensionality of the embedded system, used to determine size (only orthogonally periodic
            dimensions) and position (0 = 0D, 1 = 1D, 2 = 2D).
            }
        }

        var system_ntyp -type INTEGER {
            default { 0 }
            info {
            Specify the atom types that are used to determine the origin and size of the embedded system,
            for system-dependent properties in Environ (e.g. see later system-dependent boundary).

            Atom types up to system_ntyp are used, all atoms are used by default or if system_ntyp == 0.
            }
        }

        var temperature -type REAL {
            default { 300.D0 }
            info {
            Temperature of electrolyte solution, needed by Poisson-Boltzmann equation. Also used in 
            semiconductor simulations.
            }
            status { OPTIONAL }
        }

        var verbose -type INTEGER {
            default { 0 }
            info {
            Control the amount of output written to specific output files, mostly useful for debugging purposes

            verbose .EQ. 0 : minimal information written to standard output
            verbose .EQ. 1 : additional information written to environ.debug file
            verbose .EQ. 2 : dumping of main physical quantities on the real-space grid in the form of 
                            *.cube files (only at the end of each SCF cycle)
            verbose .GE. 3 : dumping of several intermediate physical quantities on the real-space grid
                            as this is done at every SCF step it will slow down the calculation significantly
            }
            status { OPTIONAL }
        }

        dimension zion -start 1 -end env_electrolyte_ntyp -type REAL {
            default { 1.D0 }
            info {
            Valence of ionic countercharge.
            }
            status { OPTIONAL }
        }

        var lvolume -type LOGICAL {
            default { .FALSE. }
            info {
            Print boundary volume at each step.
            }
            status { OPTIONAL }
        }

        var lsurface -type LOGICAL {
            default { .FALSE. }
            info {
            Print boundary surface at each step (triggers computation of boundary gradient).
            }
            status { OPTIONAL }
        }
    }

    namelist BOUNDARY {

        label { This namelist is not needed if there are no embedding schemes requiring a continuum interface }

        var alpha -type REAL {
            default { see below }
            info {
            Main parameter of ions-dependent interface function, corresponding to the homogeneous
            scaling factor of ionic radii (specified by the radius_mode keyword or by solvationrad
            (ntyp)).
            
            DEFAULT:

            solvent_mode .EQ. electronic | full :
                environ_type .EQ. input | vacuum : 1.D0
                environ_type .EQ. water          : 1.12D0
                environ_type .EQ. water-cation   : 1.10D0
                environ_type .EQ. water-anion    : 0.98D0

            solvent_mode .EQ. ionic : 1.D0
            }
            status { OPTIONAL }
        }

        dimension corespread -start 1 -end ntyp -type REAL {
            default { -0.5D0 }
            info {
            Numerical spread of the atomic-centered Gaussian functions used to model core electrons and
            ions for interfaces defined on the full set of degrees of freedom of the QM system 
            (interface mode = full).
            
            NOTE: this numerical parameter should only be used to avoid artefacts coming from the missing
            core electrons, if this parameter affects the final results, a WARNING will be issued and a smaller
            (even null) value should be used instead.
            }
            status { OPTIONAL }
        }

        var deriv_core -type CHARACTER {
            default { 'fft' }
            info {
            The choice of the core numerical methods to be exploited for computing derivatives.

            'fft' : fast Fourier transforms
            }
            status { OPTIONAL }
        }

        var deriv_lowpass_p1 -type REAL {
            default {-1.D0}
            info {
            If deriv_lowpass_p1 and deriv_lowpass_p2 are set to positive values, then a low-pass filter

            0.5 * erfc(p1 * g^2 / g_cut^2 - p2)

            is applied in the FFT based derivatives (gradient, Hessian, Laplacian, and forces). p1 and p2
            are the parameters set by deriv_lowpass_p1 and deriv_lowpass_p2, respectively. g^2 is the squared
            norm of a given vector in g space. g_cut^2 is the squared g vector cutoff.

            See also https://arxiv.org/abs/2507.17672, sec 3.5.
            }
            status { OPTIONAL }
        }

        var deriv_lowpass_p2 -type REAL {
            default {-1.D0}
            info {
            See deriv_lowpass_p1.
            }
            status { OPTIONAL }
        }

        var deriv_method -type CHARACTER {
            default { see below }
            info {
            Specify the numerical approach used to compute derivatives of the continuum interface with respect
            to real-space coordinates or QM degrees of freedom.

            'fft'     : fast Fourier transform
            'chain'   : chain rule derivatives for as much as possible (and FFTs for the rest)
            'highmem' : analytic derivatives for soft-sphere computed by storing all spherical functions 
                        and derivatives
            'lowmem'  : more efficient analytic derivatives

            DEFAULT:

            solvent_mode .EQ. electronic | full : 'chain'
            solvent_mode .EQ. ionic             : 'lowmem'

            }
            status { OPTIONAL }
        }

        var electrolyte_alpha -type REAL {
            default { 1.D0 }
            info {
            Main parameter of ions-dependent interface function, corresponding to the homogeneous
            scaling factor of ionic radii (specified by the radius_mode keyword or by solvationrad(ntyp)).
            Used for the electrolyte interface.
            }
            status { OPTIONAL }
        }
        
        var electrolyte_deriv_method -type CHARACTER {
            default { see below }
            info {
            Specify the numerical approach used to compute derivatives of the electrolyte interface with respect
            to real-space coordinates or QM degrees of freedom.

            'fft'     : fast Fourier transform
            'chain'   : chain rule derivatives for as much as possible (and FFTs for the rest)
            'highmem' : analytic derivatives for soft-sphere computed by storing all spherical functions 
                        and derivatives
            'lowmem'  : more efficient analytic derivatives

            DEFAULT:

            solvent_mode .EQ. electronic | full : 'chain'
            solvent_mode .EQ. ionic             : 'lowmem'

            }
            status { OPTIONAL }
        }

        var electrolyte_distance -type REAL {
            default { 0.D0 }
            info {
            Distance of the system-dependent interface from the center of the system, computed as the
            center of ionic charge of the atomic types entering the definition of the system
            (as specified in the system_ntyp keyword of the &ENVIRON namelist).
            Used for the electrolyte interface.
            }
            status { OPTIONAL }
        }

        var electrolyte_mode -type CHARACTER {
            default { 'electronic' }
            info {
            Choice of the interface function representing the boundary between the QM region and the
            electrolyte embedding environment. Please note that a separate set of keywords is used to 
            specify the parameters of the electrolyte interface function (all exploiting the 
            electrolyte_ prefix).

            'electronic':
                interface depends self-consist. on electronic density, corresponds
                to the Self-consistent Continuum Solvation approach (SCCS).

            'ionic':
                interface defined on atomic positions, corresponds to the
                Soft-sphere Continuum Solvation approach (SSCS).

            'full':
                similar to electronic, but an extra density is added to
                represent the core electrons and the nuclei. This extra
                density is defined as the sum of gaussian functions centered
                on atomic positions of width specified by the corespread(ityp) keyword.

            'system':
                interface defined as a simple analytical function of system position and
                dimensionality.
            }
            status { REQUIRED }
        }

        var electrolyte_rhomax -type REAL {
            default { 0.005D0 }
            info {
            First parameter of the density-dependent interface function, roughly corresponding to the 
            density threshold of the continuum model. Used for the electrolyte interface.
            }
            status { OPTIONAL }
        }

        var electrolyte_rhomin -type REAL {
            default { 0.0001D0 }
            info {
            Second parameter of the density-dependent interface function, when stype=1. Used for the 
            electrolyte interface.
            }
            status { OPTIONAL }
        }

        var electrolyte_softness -type REAL {
            default { 0.5D0 }
            info {
            Numerical spread of the soft-sphere functions used for the ions-dependent interfaces.
            Used for the electrolyte interface.
            }
            status { OPTIONAL }
        }

        var electrolyte_spread -type REAL {
            default { 0.5D0 }
            info {
            Numerical spread of the analytical function used for the system-dependent interface.
            Used for the electrolyte interface.
            }
            status { OPTIONAL }
        }

        var electrolyte_tbeta -type REAL {
            default { 4.8D0 }
            info {
            Second parameter of the density-dependent interface function, when stype=0. Used for the
            electrolyte interface.
            }
            status { OPTIONAL }
        }

        var field_aware -type LOGICAL {
            default { .FALSE. }
            info {
            Switch to turn on the field-awareness scaling factor (only works with ionic boundary mode).
            }
            status { OPTIONAL }
        }

        var field_factor -type REAL {
            default { 0.08D0 }
            info {
            Maximum scaling factor possible by the field-aware model.
            }
            status { OPTIONAL }
        }

        var field_asymmetry -type REAL {
            default { -0.32D0 }
            info {
            Charge asymmetry factor. Positive values result in more field-awareness for positive charges,
            and vice-versa.
            }
            status { OPTIONAL }
        }

        var field_max -type REAL {
            default { 6.D0 }
            info {
            Maximum flux value for switching function.
            }
            status { OPTIONAL }
        }

        var field_min -type REAL {
            default { 2.D0 }
            info {
            Minimum flux value for switching function.
            }
            status { OPTIONAL }
        }

        var filling_spread -type REAL {
            default { 0.02D0 }
            info {
            For solvent-aware interfaces, numerical spread of the switching function used to decide whether 
            the continuum void should be filled or not.
            }
            status { OPTIONAL }
        }

        var filling_threshold -type REAL {
            default { 0.825D0 }
            info {
            For solvent-aware interfaces, threshold of filled-fraction used to decide whether to fill or not
            a continuum void. The default value of 7/8 correspond to the geometrical condition required to
            homogenously fill a spherical void of radius smaller than the solvent radius.
            }
            status { OPTIONAL }
        }

        var ifdtype -type INTEGER {
            default { 1 }
            info {
            The gradient of the dielectric function is computed in real-space using finite differences.
            Different finite differences schemes have been implemented following:

            P. Holoborodko, Smooth noise robust differentiators, 2008
            http://www.holoborodko.com/pavel/numerical-methods/numerical-derivative/smooth-low-noise-differentiators

            Each scheme can exploit different numbers of points of the real-space grid (as defined by nfdpoint).

            ifdtype .EQ. 1 : Central differences
            ifdtype .EQ. 2 : Low-noise Lanczos (m=2)
            ifdtype .EQ. 3 : Low-noise Lanczos (m=4)
            ifdtype .EQ. 4 : Smooth noise-robust (n=2)
            ifdtype .EQ. 5 : Smooth noise-robust (n=4)

            Central differences are used by default and have been tested more deeply. The other schemes 
            work fine, but are not deeply tested in terms of performances.
            }
            status { OPTIONAL }
        }

        var nfdpoint -type INTEGER {
            default { 2 }
            info {
            Number of point from the real-space grid, to be used by the different finite-difference schemes 
            to compute gradients.
            Number of points = 2 * nfdpoint + 1
            e.g. ifdtype.EQ.1 .AND. nfdpoint.EQ.1 correspond to central differences with three points

            IMPORTANT: nfdpoint .EQ. 1 seems to be enough for most applications, but more refined 
            finite-difference schemes are needed (nfdpoint.EQ.2 is enough) for energy conservation 
            in MD simulations in continuum dielectric.

            See test case reported in O. Andreussi, I. Dabo and N. Marzari, J. Chem. Phys. 136 064102 (2012)
            }
            status { IMPORTANT }
        }

        var radial_scale -type REAL {
            default { 2.D0 }
            info {
            For solvent-aware interfaces, compute the filled fraction on a spherical volume whose radius is
            radial_scale * solvent_radius. The default value of 2.0 guarantees that spherical voids of the size
            of a solvent molecule will be homogenously filled. Larger values will let the algorithm sample a
            larger volume of space, increasing the non-locality of the algorithm.
            }
            status { OPTIONAL }
        }

        var radial_spread -type REAL {
            default { 0.5D0 }
            info {
            For solvent-aware interfaces, numerical spread of the step function used to compute the filled fraction.
            }
            status { OPTIONAL }
        }

        var radius_mode -type CHARACTER {
            default { 'uff' }
            info {
            Specify the predefined set of atomic radii to be used when building an ions-dependent interface.

            'pauling' : R.C. Weast, ed., Handbook of chemistry and physics (CRC Press, Cleveland, 1981)
            'bondi'   : A. Bondi, J. Phys. Chem. 68, 441 (1964)
            'uff'     : A.K. Rapp/'{e} et al. J. Am. Chem. Soc. 114(25) pp.10024-10035 (1992)
            'muff'    : Fisicaro JCTC (2017)
            }
            status { OPTIONAL }
        }

        var rhomax -type REAL {
            default { see below }
            info {
            First parameter of the density-dependent interface function, roughly corresponding to 
            the density threshold of the continuum model.
                        
            DEFAULT:

            solvent_mode .EQ. electronic | full :
                environ_type .EQ. input | vacuum | water : 0.005D0
                environ_type .EQ. water-cation           : 0.0035D0
                environ_type .EQ. water-anion            : 0.0155D0

            solvent_mode .EQ. ionic : 0.005D0
            }
            status { OPTIONAL }
        }

        var rhomin -type REAL {
            default { see below }
            info {
            Second parameter of the density-dependent interface function, when stype=1.
                                    
            DEFAULT:

            solvent_mode .EQ. electronic | full :
                environ_type .EQ. input | vacuum | water : 0.0001D0
                environ_type .EQ. water-cation           : 0.0002D0
                environ_type .EQ. water-anion            : 0.0024D0

            solvent_mode .EQ. ionic : 0.0001D0
            }
            status { OPTIONAL }
        }

        var sc_distance -type REAL {
            default { 0.D0 }
            info {
            Distance from the system where the Mott-Schottky boundary starts.
            }
            status { OPTIONAL }
        }

        var sc_spread -type REAL {
            default { 0.5D0 }
            info {
            Spread of the interfaces for the Mott-Schottky boundary.
            }
            status { OPTIONAL }
        }

        var softness -type REAL {
            default { 0.5D0 }
            info {
            Numerical spread of the soft-sphere functions used for the ions-dependent interfaces.
            }
            status { OPTIONAL }
        }

        dimension solvationrad -start 1 -end ntyp -type REAL {
            default { -3.D0 }
            info {
            Atomic radii used for the ions-dependent interface as introduced by G. Fisicaro et al.
            J. Chem. Theory Comput. 13, 8, 3829 (2017). These values will overwrite the defaults
            set by the radius_mode keyword.
            }
            status { OPTIONAL }
        }

        var solvent_distance -type REAL {
            default { 1.D0 }
            info {
            Distance of the system-dependent interface from the center of the system, computed as the
            center of ionic charge of the atomic types entering the definition of the system
            (as specified in the system_ntyp keyword of the &ENVIRON namelist).
            }
            status { OPTIONAL }
        }

        var solvent_mode -type CHARACTER {
            default { 'electronic' }
            info {
            Choice of the interface function representing the boundary between the
            QM region and the solvent embedding environment. Dielectric, surface and
            volume embedding will all act on the solvent interface (as opposed to
            the electrolyte embedding that will act on the electrolyte interface).

            'electronic':
                interface depends self-consist. on electronic density, corresponds
                to the Self-consistent Continuum Solvation approach (SCCS).

            'ionic':
                interface defined on atomic positions, corresponds to the
                Soft-sphere Continuum Solvation approach (SSCS).

            'full':
                similar to electronic, but an extra density is added to
                represent the core electrons and the nuclei. This extra
                density is defined as the sum of gaussian functions centered
                on atomic positions of width specified by the corespread(ityp) keyword.

            'system':
                inteface defined as a simple analytical function of system position and
                dimensionality.
            }
            status { REQUIRED }
        }

        var solvent_radius -type REAL {
            default { 0.D0 }
            info {
            Size of the solvent molecules, used in the solvent-aware algorithm to decide whether to fill 
            a continuum void or not. If set equal to 0.D0, use the standard local algorithm.
            }
            status { OPTIONAL }
        }

        var solvent_spread -type REAL {
            default { 0.5D0 }
            info {
            Numerical spread of the analytical function used for the system-dependent interface.
            }
            status { OPTIONAL }
        }

        var stype -type INTEGER {
            default { 2 }
            info {
            The shape of the environment region is defined according to a specific switching function 
            of the electronic density:

            stype .EQ. 0 : Original switching function from Fattebert and Gygi.
                           Requires two parameters: rhomax and tbeta
            stype .EQ. 1 : Optimally smooth switching function from the SCCS method, redefined for the 
                           non-electrostatic part.
                           Requires two parameters: rhomax and rhomin
            stype .EQ. 2 : Optimally smooth switching function from the SCCS method of Andreussi et al.
                           Requires two parameters: rhomax and rhomin
            }
            status { OPTIONAL }
        }

        var tbeta -type REAL {
            default { 4.8D0 }
            info {
            Second parameter of the density-dependent interface function, when stype=0.
            }
            status { OPTIONAL }
        }
    }

    namelist ELECTROSTATIC {

        label { This namelist is not needed if there are no electrostatic embedding effects }

        var auxiliary -type CHARACTER {
            default { see below }
            info {
            The electrostatic problem is defined and solved in terms of the electrostatic potential or of an auxiliary quantity.

            'none' : solve for the electrostatic potential.
            'full' : solve for the auxiliary charge (e.g. for 'generalized' problems solve for
                     the polarization charge, used to be the default in Environ v0.2).
            'ioncc': solve for the electrolyte charge.

            DEFAULT:

            IF (solver .EQ. 'fixed-point')
                auxiliary = 'full'
            ELSE
                auxiliary = 'none'
            }
            status { OPTIONAL }
        }

        var core -type CHARACTER {
            default { 'fft' }
            info {
            The choice of the core numerical methods to be exploited for the different operations.

            'fft' : fast Fourier transforms
            }
            status { OPTIONAL }
        }

        var inner_core -type CHARACTER {
            default { 'fft' }
            info {
            The choice of the core numerical methods to be exploited for nested electrostatics.

            'fft' : fast Fourier transforms
            }
            status { OPTIONAL }
        }

        var inner_maxstep -type INTEGER {
            default { 200 }
            info {
            Same as maxstep, but refers to the inner loop in the electrostatic calculation 
            (nested schemes only). 
            }
            status { OPTIONAL }
        }

        var inner_mix -type REAL {
            default { 0.5D0 }
            info {
            Same as mix, but refers to the inner loop in the electrostatic calculation 
            (nested schemes only).
            }
            status { OPTIONAL }
        }

        var inner_problem -type CHARACTER {
            default { see below }
            info {
            Type of electrostatic problem for inner loop in nested algorithms.

            'generalized' : generalized poisson equation.
            'linpb'       : linearized poisson-boltzmann equation (debye-huckel).

            DEFAULT:

            IF (inner_solver .NE. 'none')
                IF (solver .EQ. 'fixed-point')
                    IF (auxiliary == 'ioncc') 
                        inner_problem = 'generalized'
                IF (solver .EQ. 'newton')
                    inner_problem = 'linpb'
            }
            status { OPTIONAL }
        }

        var inner_solver -type CHARACTER {
            default { see below }
            info {
            Same as solver, but refers to the algorithm used to get the solution of the inner loop 
            in the electrostatic problem (nested schemes only).

            'cg'          :
            'sd'          :
            'fixed-point' :
            'direct'      :

            DEFAULT:

            IF (env_electrolyte_ntyp .GT. 0 .AND. pbc_correction .NE. 'gcs')
                IF (.NOT. electrolyte_linearized) 
                    inner_solver = 'cg'
                ELSE
                    inner_solver = 'none'
            }
            status { OPTIONAL }
        }

        var inner_tol -type REAL {
            default { 1.D-10 }
            info {
            Accuracy of the inner loop in the electrostatic calculation (nested schemes only).
            As for the tol parameter, higher accuracies will require more cycles, but will ensure 
            smoother convergence of the outer electrostatic loop (thresholds smaller than 1.D-15 
            are recommended). 
            }
            status { IMPORTANT }
        }

        var maxstep -type INTEGER {
            default { 200 }
            info {
            Maximum number of steps to get the solution of the electrostatic problem.
            }
            status { OPTIONAL }
            }

        var mix -type REAL {
            default { 0.5D0 }
            info {
            Linear mixing parameter for iterative solver. Usually does not affect results 
            (and it shouldn't) and does not affect performances, large values work fine in 
            most common applications.
            }
            status { OPTIONAL }
        }

        var mix_type -type CHARACTER {
            default { 'linear' }
            info {
            The mixing method for iterative calculations.

            'linear'   : 
            'anderson' : 
            'diis'     : 
            'broyden'  : 
            }
            status { OPTIONAL }
        }

        var ndiis -type INTEGER {
            default { 1 }
            info {
            The order of DIIS interpolation of iterative calculation. 
            }
            status { OPTIONAL }
        }

        var pbc_axis -type INTEGER {
            default { 3 }
            info {
            For partially periodic simulation cells (1D or 2D), choice of the sides with periodic 
            boundary conditions (1 = x, 2 = y, 3 = z)
            
            pbc_dim .EQ. 1 : specified axis is along the 1D direction.
            pbc_dim .EQ. 2 : specified axis is orthogonal to 2D plane.
            }
            status { OPTIONAL }
        }
        
        var pbc_core -type CHARACTER {
            default { '1da' }
            info {
            The choice of the core numerical methods to be exploited for pbc corrections.

            '1da' : 1d-analytic
            }
            status { OPTIONAL }
        }
        
        var pbc_correction -type CHARACTER {
            default { 'none' }
            info {
            Type of pbc correction scheme to be used.

            'none'      : no correction
            'parabolic' : parabolic point-counter-charge (PCC) correction, only implemented for 0D 
                          and 2D systems
            'gcs'       : Gouy-Chapman-Stern correction, only implemented for 2D systems. It 
                          exploits the one-dimensional analytic solution of the Poisson-Boltzmann 
                          equation. The analytic potential replaces the numerical one where the 
                          distance from the system is larger than electrolyte_distance (all charge 
                          distributions, including the polarization charge, must be fully included 
                          within this distance)
            'ms'        : Mott-Schottky correction, only implemented for 2D systems, assumes the 
                          system is embedded in a semiconductor with sc_permittivity and 
                          sc_carrier_density. It exploits the one-dimensional analytic solution of 
                          the Mott-Schottky equation. The analytic potential replaces the 
                          numerical one where the distance from the system is larger than sc_distance 
                          (all charge distributions, including the polarization charge, must be fully 
                          included within this distance)
            }
            status { OPTIONAL }
        }

        var pbc_dim -type INTEGER {
            default { -3 }
            info {
            Dimensionality of the simulation cell, i.e. periodic boundary conditions are applied 
            on 3/2/1/0 sides of the cell.
            }
            status { OPTIONAL }
        }
        
        var preconditioner -type CHARACTER {
            default { 'sqrt' }
            info {
            The type of preconditioner.

            'none' : no preconditioner
            'left' : left linear preconditioner eps nabla v = r
            'sqrt' : sqrt preconditioner sqrt(eps) nabla (sqrt(eps) * v) = r
            }
            status { OPTIONAL }
        }

        var problem -type CHARACTER {
            default { see below }
            info {
            Type of electrostatic problem that need to be solved. This keyword is usually set 
            automatically by the ENVIRON namelist, but it may be used to specify a linearized 
            or modified version of an electrostatic problem.

            'poisson'     : standard Poisson equation, with or without periodic boundary conditions
            'generalized' : generalized Poisson equation, a dielectric embedding must be present
            'pb'          : non-linear Poisson-Boltzmann equation, an electrolyte embedding must 
                            be present, a dielectric embedding is optional
            'modpb'       : non-linear size-modified Poisson-Boltzmann equation, an electrolyte 
                            embedding must be present, a dielectric embedding is optional
            'linpb'       : linearized version of the Poisson-Boltzmann problem
            'linmodpb'    : linearized version of the modified Poisson-Boltzmann problem

            DEFAULT:

            IF (env_electrolyte_ntyp .GT. 0 .AND. pbc_correction .NE. 'gcs')
                IF (electrolyte_linearized)
                    IF (cionmax > 0.D0 .OR. rion > 0.D0)
                        problem = 'linmodpb' 
                    ELSE
                        problem = 'linpb'
            ELSE IF (env_static_permittivity .GT. 1.D0 .OR. env_dielectric_regions .GT. 0)
                problem = 'generalized'
            ELSE
                problem = 'poisson'
            }
            status { OPTIONAL }
        }

        var screening -type REAL {
            default { 0.D0 }
            info {
            Same as mix, but refers to the inner loop in the electrostatic calculation 
            (nested schemes only).
            }
            status { OPTIONAL }
        }

        var screening_type -type CHARACTER {
            default { 'none' }
            info {
            Uses the screened coulomb Green's function instead of the vacuum one.
            
            'none'    : unscreened coulomb
            'input'   : screened coulomb with screening length provided in input
            'linear'  : screened coulomb with screening length from linear component
                        of the problem
            'optimal' : screened coulomb with screening length optimized (to be defined)
            }
            status { OPTIONAL }
        }

        var solver -type CHARACTER {
            default { see below }
            info {
            Type of numerical solver used to get the solution of the electrostatic problem.

            'direct'      : Get the direct solution of the problem as provided by the adopted 
                            numerical core. At this time, the FFT numerical core of Environ only 
                            allows the 'poisson' problem to be solved directly
            'fixed-point' : Use a fixed-point search algorithm (used to be the default for the 
                            'generalized' problem in Environ v0.2)
            'sd'          : Use a steepest-descent algorithm, possibly preconditioned
            'cg'          : Use a conjugate-gradient algorithm, possibly preconditioned
            'newton'      : Use Newton's root-finding method

            DEFAULT:
            
            IF (env_electrolyte_ntyp .GT. 0 .AND. pbc_correction .NE. 'gcs')
                IF (electrolyte_linearized)
                    solver = 'cg'
                ELSE
                    solver = 'newton'
            ELSE IF (env_static_permittivity .GT. 1.D0 .OR. env_dielectric_regions .GT. 0)
                IF (pbc_correction .NE. 'gcs')
                    solver = 'cg'
                ELSE
                    solver = 'fixed-point'
            ELSE
                solver = 'direct'

            }
            status { OPTIONAL }
        }

        var step -type REAL {
            default { 0.3D0 }
            info {
            Step size to be used if step_type = 'input' (inherits the tasks of the old mixrhopol).
            }
            status { OPTIONAL }
        }

        var step_type -type CHARACTER {
            default { 'optimal' }
            info {
            The step size in gradient descent algorithms or iterative mixing.

            'optimal' : step size that minimize the cost function on the descent direction
            'input'   : fixed step size as defined in input (step keyword)
            'random'  : random step size within zero and twice the optima value
            }
            status { OPTIONAL }
        }

        var tol -type REAL {
            default { 1.D-5 }
            info {
            Accuracy of the electrostatic calculation: higher accuracies will require more cycles,
            but will ensure smoother SCF convergence. As electrostatic solver iterations are 
            usually cheaper than SCF cycles, it is recommended to increase this accuracy whenever 
            the SCF has problems converging.
            The units depend on the actual quantity that is computed by the algorithm, either the 
            potential (auxiliary = 'none') or an auxiliary charge (auxiliary = 'full'). In the 
            latter case, much smaller thresholds should be adopted (e.g. lower than 1.D-8).
            }
            status { IMPORTANT }
        }
    }

    #
    # card EXTERNAL_CHARGES
    #

    card EXTERNAL_CHARGES {

        flag extcharge_unit -use optional {

            enum { bohr | angstrom }

            default { (DEPRECATED) bohr }

            info {
                bohr     : atomic positions are in cartesian coordinate, in atomic units
                           (i.e. Bohr radii)

                angstrom : atomic positions are in cartesian coordinates, in Angstrom
                }
        }

        syntax {
            table extcharge_coordinates {
                rows -start 1 -end nec {

                    col Q -type REAL {
                    info { Total charge of external object }
                    }

                    colgroup -type REAL {
                    info {
                        Positions

                        NOTE: each atomic coordinate can also be specified as a simple algebraic expression, 
                              see the description in the input file of PW.
                    }
                    col x
                    col y
                    col z
                    }

                    optional {
                        col spread -type REAL {
                            info {
                            Gaussian spread of the external charge density in atomic units
                            }
                            default { 0.5 }
                        }
                        col dim -type INTEGER {
                            info {
                            Dimensionality of the charge density

                            dim .EQ. 0 : point-like (gaussian shaped) charge density
                            dim .EQ. 1 : linear (gaussian shaped) charge density
                            dim .EQ. 2 : planar (gaussian shaped) charge density

                            }
                            default { 0 }
                        }
                        col axis -type INTEGER {
                            info {
                            Axis of the external charge density

                            if dim.EQ.0 : axis has no meaning/use
                            if dim.EQ.1 : axis identifies the direction of the linear charge density. 
                                          axis .EQ. 1|2|3 means lines along x|y|z respectively
                            if dim.EQ.2 : axis identifies the direction orthogonal to the planar charge density. 
                                          axis .EQ. 1|2|3 means planes orthogonal to x|y|z

                            }
                            default { 3 }
                        }
                    }
                }
            }
        }
    }

    #
    # card DIELECTRIC_REGIONS
    #

    card DIELECTRIC_REGIONS {

        flag epsregion_unit -use optional {

            enum { bohr | angstrom }

            default { (DEPRECATED) bohr }

            info {
                bohr    : positions are in cartesian coordinate, in atomic units
                          (i.e. Bohr radii)

                angstrom: positions are in cartesian coordinates,
                          in Angstrom
                }
        }

        syntax {
             table epsregion_coordinates {
                rows -start 1 -end ndr {

                    col EpsSt -type REAL {
                    info { Static permittivity inside of dielectric region }
                    }

                    col EpsOpt -type REAL {
                    info { Optical permittivity inside of dielectric region }
                    }

                    colgroup -type REAL {
                    info {
                        Positions

                        NOTE: each coordinate can also be specified as a simple algebraic expression, see the description in the input file of PW.
                    }
                    col x
                    col y
                    col z
                    }

                    col width -type REAL {
                    info { Width of the dielectric region in atomic units }
                    }

                    optional {
                        col spread -type REAL {
                            info { Spread of the dielectric region in atomic units }
                            default { 0.5 }
                        }

                        col dim -type INTEGER {
                            info {
                            Dimensionality of the dielectric region

                            dim .EQ. 0 : sphere-like (erfc shaped) region
                            dim .EQ. 1 : cylinder-like (erfc shaped) region
                            dim .EQ. 2 : planar (erfc shaped) region

                            }
                            default { 0 }
                        }

                        col axis -type INTEGER {
                            info {
                            Axis of the dielectric region.

                            dim .EQ. 0 : axis has no meaning/use
                            dim .EQ. 1 : axis identifies the direction of the linear charge 
                                         density. 
                                         axis .EQ. 1|2|3 means lines along x|y|z respectively
                            dim .EQ. 2 : axis identifies the direction orthogonal to the planar 
                                         charge density. 
                                         axis .EQ. 1|2|3 means planes orthogonal to x|y|z
                            }
                            default { 3 }
                        }
                    }
                }
            }
        }
    }
}
